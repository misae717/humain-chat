/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, open the repository sources.
*/
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HumainChatPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  enabled: true,
  autoOpenOnStart: true,
  compactUI: false,
  accentColor: "#00D49C",
  gradientEnabled: true,
  gradientStart: "#a8f374",
  gradientEnd: "#00bfa5",
  gradientAngle: "180deg",
  glassBlur: "10px",
  glassOpacity: "0.65",
  animatedGradient: true,
  oceanEnabled: true,
  noiseEnabled: true,
  oceanIntensity: 0.6,
  openAIApiKey: "",
  openAIModel: "gpt-5-chat-latest",
  openAIBaseUrl: "https://api.openai.com"
};
var VIEW_TYPE_CHAT = "humain-chat-view";

// src/ui/chatView.ts
var import_obsidian = require("obsidian");

// src/ui/logo.svg
var logo_default = '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0.06 11.13 600 49.58" aria-label="HUMAIN CHAT">\r\n  <g clip-path="url(#humain-chat_svg__a)">\r\n    <g clip-path="url(#humain-chat_svg__b)">\r\n      <path fill="#000" d="M105.696 36.887c0 8.578-5.478 14.78-13.126 14.78-7.649 0-13.127-6.15-13.127-14.78V12.133h-9.302v24.754c0 13.694 9.56 23.823 22.429 23.823 12.867 0 22.428-10.129 22.428-23.823V12.133h-9.302zM152.774 32.132h-.672l-14.624-20h-8.424v47.596h9.302v-33.28h.155s.93 3.049 2.584 5.322l6.563 8.94h9.302l6.563-8.94c1.654-2.273 2.584-5.322 2.584-5.322h.155V59.78h9.302V12.133h-8.423l-14.625 20zM204.815 12.133l-19.173 47.595h9.871l3.824-9.508h24.702l3.824 9.508h10.129l-19.121-47.595zm-2.016 29.508 8.424-20.93h.93l8.424 20.93h-17.829zM257.113 12.133h-9.302v47.595h9.302zM308.584 12.133V45l-28.991-32.867h-8.424v47.596h9.302V26.912l28.992 32.867h8.423V12.133zM46.834 22.21H9.367v-9.974H.065v47.596h9.302V49.806h37.415v10.026h9.302V12.236h-9.302v10.026zM9.367 41.176V30.84h37.415v10.336z"/>\r\n      <path fill="#00D49C" d="M380.267 40.137h10.176c-1.902 12.077-11.602 20.444-24.439 20.444-14.263 0-24.723-10.46-24.723-24.723 0-14.264 10.46-24.723 24.723-24.723 12.837 0 22.537 8.367 24.439 20.444h-10.176c-1.617-6.848-7.132-11.41-14.263-11.41-8.558 0-14.739 6.655-14.739 15.689 0 9.033 6.181 15.69 14.739 15.69 7.131 0 12.646-4.662 14.263-11.411M410.886 31.579h28.527V12.086h9.509V59.63h-9.509V40.137h-28.527V59.63h-9.508V12.086h9.508zM457.955 59.63l19.493-47.544h14.263l19.493 47.544h-10.268l-3.897-9.509h-25.105l-3.896 9.509H457.96zm35.56-18.067-8.558-20.92h-.951l-8.558 20.92zM509.303 12.086h47.544v8.558h-19.018V59.63h-9.509V20.644h-19.017zM570.769 16.525h3.711c1.013 0 1.69.677 1.69 1.69 0 .44-.192.812-.507 1.06.46.237.729.65.729 1.193 0 1.013-.677 1.69-1.69 1.69h-3.938v-5.622zm3.711 2.305c.336 0 .563-.227.563-.563v-.17c0-.337-.227-.564-.563-.564h-2.589v1.292h2.589zm-2.584 2.305h2.811c.336 0 .563-.227.563-.563v-.17c0-.337-.227-.564-.563-.564h-2.811v1.292zM578.867 17.538v1.292h3.261v1.013h-3.261v1.292h4.388v1.013h-5.515v-5.623h5.515v1.013zM584.267 16.525h5.623v1.013h-2.248v4.61h-1.127v-4.61h-2.248zM589.667 22.148l2.305-5.623h1.69l2.305 5.623h-1.214l-.46-1.127h-2.972l-.46 1.127zm4.207-2.134-1.013-2.476h-.114l-1.012 2.476z"/>\r\n      <path fill="#00D49C" d="M595.983 13.079a3.051 3.051 0 0 1 3.049 3.049v6.733a3.052 3.052 0 0 1-3.049 3.05h-26.361a3.051 3.051 0 0 1-3.049-3.05v-6.733a3.051 3.051 0 0 1 3.049-3.05zm0-1.034h-26.361a4.081 4.081 0 0 0-4.083 4.083v6.733a4.082 4.082 0 0 0 4.083 4.083h26.361a4.081 4.081 0 0 0 4.082-4.083v-6.733a4.08 4.08 0 0 0-4.082-4.083"/>\r\n    </g>\r\n  </g>\r\n  <defs>\r\n    <clipPath id="humain-chat_svg__a"><path fill="#fff" d="M.065.135h600v72h-600z"/></clipPath>\r\n    <clipPath id="humain-chat_svg__b"><path fill="#fff" d="M.065 11.135h600V60.71h-600z"/></clipPath>\r\n  </defs>\r\n</svg>\r\n\r\n\r\n';

// src/ui/chatView.ts
var ChatView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
    this.conversation = [{ role: "system", content: "You are HUMAIN Chat inside Obsidian. Be concise and helpful." }];
  }
  getViewType() {
    return VIEW_TYPE_CHAT;
  }
  getDisplayText() {
    return "HUMAIN Chat";
  }
  getIcon() {
    return "message-square";
  }
  async onOpen() {
    var _a, _b, _c, _d, _e;
    const root = this.contentEl;
    root.addClass("humain-chat-view");
    const header = root.createEl("div", { cls: "humain-chat-header" });
    const brand = header.createEl("div", { cls: "humain-logo" });
    brand.innerHTML = logo_default;
    const plugin = (_b = (_a = this.app.plugins) == null ? void 0 : _a.getPlugin) == null ? void 0 : _b.call(_a, "humain-chat");
    const animated = !!((_c = plugin == null ? void 0 : plugin.settings) == null ? void 0 : _c.animatedGradient);
    const ocean = !!((_d = plugin == null ? void 0 : plugin.settings) == null ? void 0 : _d.oceanEnabled);
    const noise = !!((_e = plugin == null ? void 0 : plugin.settings) == null ? void 0 : _e.noiseEnabled);
    if (animated)
      root.addClass("humain-gradient-animated");
    if (ocean)
      root.addClass("humain-ocean");
    if (noise)
      root.addClass("humain-noise");
    if (ocean)
      root.createEl("div", { cls: "humain-ocean-layer3" });
    const messages = root.createEl("div", { cls: "humain-chat-messages" });
    const inputRow = root.createEl("form", { cls: "humain-chat-input-row" });
    const textarea = inputRow.createEl("textarea", { cls: "humain-chat-textarea", attr: { placeholder: "Type a message\u2026" } });
    textarea.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        inputRow.requestSubmit();
      }
    });
    const sendBtn = inputRow.createEl("button", { cls: "humain-chat-send", text: "Send", attr: { type: "submit" } });
    if (animated)
      sendBtn.addClass("anim");
    inputRow.addEventListener("submit", async (e) => {
      e.preventDefault();
      const text = textarea.value.trim();
      if (!text)
        return;
      sendBtn.setAttr("disabled", "true");
      this.appendMessage(messages, text, "user");
      this.conversation.push({ role: "user", content: text });
      textarea.value = "";
      const placeholder = this.appendMessage(messages, "\u2026", "assistant");
      messages.scrollTop = messages.scrollHeight;
      try {
        const reply = await this.callOpenAI();
        placeholder.setText(reply || "");
        if (reply)
          this.conversation.push({ role: "assistant", content: reply });
      } catch (err) {
        console.error("OpenAI error", err);
        placeholder.setText(`OpenAI error: ${(err == null ? void 0 : err.message) || String(err)}`);
      }
      messages.scrollTop = messages.scrollHeight;
      sendBtn.removeAttribute("disabled");
    });
  }
  appendMessage(container, text, role) {
    const row = container.createEl("div", { cls: `humain-chat-row role-${role}` });
    const el = row.createEl("div", { cls: "humain-chat-bubble humain-bubble-in", text });
    return el;
  }
  async callOpenAI() {
    var _a, _b, _c, _d, _e;
    const plugin = (_b = (_a = this.app.plugins) == null ? void 0 : _a.getPlugin) == null ? void 0 : _b.call(_a, "humain-chat");
    const settings = (plugin == null ? void 0 : plugin.settings) || {};
    const apiKey = settings.openAIApiKey || "";
    const baseUrl = (settings.openAIBaseUrl || "https://api.openai.com").replace(/\/$/, "");
    const model = settings.openAIModel || "gpt-5-chat-latest";
    if (!apiKey)
      throw new Error("Missing OpenAI API key. Set it in Settings \u2192 HUMAIN Chat.");
    const messagesLimited = this.buildLimitedMessages(this.conversation, 6e3);
    const url = `${baseUrl}/v1/chat/completions`;
    const resp = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model,
        messages: messagesLimited,
        stream: false,
        temperature: 0.3
      })
    });
    if (!resp.ok)
      throw new Error(`OpenAI HTTP ${resp.status}`);
    const json = await resp.json();
    return ((_e = (_d = (_c = json == null ? void 0 : json.choices) == null ? void 0 : _c[0]) == null ? void 0 : _d.message) == null ? void 0 : _e.content) || "";
  }
  buildLimitedMessages(all, maxTokens) {
    var _a;
    const estimate = (s) => Math.ceil(s.length / 4);
    let total = 0;
    const out = [];
    const sys = ((_a = all[0]) == null ? void 0 : _a.role) === "system" ? all[0] : void 0;
    const rest = sys ? all.slice(1) : all.slice(0);
    const reversed = [...rest].reverse();
    const acc = [];
    for (const m of reversed) {
      const t = estimate(m.content) + 4;
      if (total + t > maxTokens)
        break;
      total += t;
      acc.push(m);
    }
    acc.reverse();
    if (sys) {
      const tSys = estimate(sys.content) + 4;
      if (total + tSys <= maxTokens) {
        out.push(sys);
      }
    }
    out.push(...acc);
    return out;
  }
  async onClose() {
    this.contentEl.empty();
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");
var HumainChatSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Enable plugin").setDesc("Turn the chat sidebar on or off.").addToggle((toggle) => toggle.setValue(this.plugin.settings.enabled).onChange(async (value) => {
      this.plugin.settings.enabled = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "OpenAI" });
    new import_obsidian2.Setting(containerEl).setName("API key").setDesc("Temporary dev key; stored in plugin data.").addText((text) => text.setPlaceholder("sk-... or sk-proj-...").setValue(this.plugin.settings.openAIApiKey || "").onChange(async (value) => {
      this.plugin.settings.openAIApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Model").setDesc("OpenAI chat model (default: gpt-5-chat)").addText((text) => text.setPlaceholder("gpt-5-chat-latest").setValue(this.plugin.settings.openAIModel || "gpt-5-chat-latest").onChange(async (value) => {
      this.plugin.settings.openAIModel = value || "gpt-5-chat-latest";
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Base URL (optional)").setDesc("Override base URL for OpenAI-compatible endpoints").addText((text) => text.setPlaceholder("https://api.openai.com").setValue(this.plugin.settings.openAIBaseUrl || "https://api.openai.com").onChange(async (value) => {
      this.plugin.settings.openAIBaseUrl = value || "https://api.openai.com";
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Auto-open on start").setDesc("Open the chat view when Obsidian loads.").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoOpenOnStart).onChange(async (value) => {
      this.plugin.settings.autoOpenOnStart = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Compact UI").setDesc("Reduce paddings and font sizes.").addToggle((toggle) => toggle.setValue(this.plugin.settings.compactUI).onChange(async (value) => {
      this.plugin.settings.compactUI = value;
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Accent color").setDesc("CSS color for user message bubbles and accents.").addText((text) => text.setPlaceholder("e.g. #6c5ce7 or var(--interactive-accent)").setValue(this.plugin.settings.accentColor).onChange(async (value) => {
      this.plugin.settings.accentColor = value || "var(--interactive-accent)";
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    containerEl.createEl("h3", { text: "Gradient & glass" });
    new import_obsidian2.Setting(containerEl).setName("Enable gradient background").setDesc("Apply a vertical green\u2192teal gradient behind the chat.").addToggle((toggle) => toggle.setValue(this.plugin.settings.gradientEnabled).onChange(async (value) => {
      this.plugin.settings.gradientEnabled = value;
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Gradient start").setDesc("Top color. Ex: #a8f374").addText((text) => text.setValue(this.plugin.settings.gradientStart).onChange(async (value) => {
      this.plugin.settings.gradientStart = value || "#a8f374";
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Gradient end").setDesc("Bottom color. Ex: #00bfa5").addText((text) => text.setValue(this.plugin.settings.gradientEnd).onChange(async (value) => {
      this.plugin.settings.gradientEnd = value || "#00bfa5";
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Gradient angle").setDesc("CSS angle (e.g. 180deg).").addText((text) => text.setValue(this.plugin.settings.gradientAngle).onChange(async (value) => {
      this.plugin.settings.gradientAngle = value || "180deg";
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Glass blur").setDesc("Backdrop-filter blur amount (e.g. 10px).").addText((text) => text.setValue(this.plugin.settings.glassBlur).onChange(async (value) => {
      this.plugin.settings.glassBlur = value || "10px";
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Glass opacity").setDesc("0 to 1, controls translucency of chat container.").addText((text) => text.setValue(this.plugin.settings.glassOpacity).onChange(async (value) => {
      this.plugin.settings.glassOpacity = value || "0.65";
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Animated gradient").setDesc("Subtle movement across the background gradient.").addToggle((toggle) => toggle.setValue(this.plugin.settings.animatedGradient).onChange(async (value) => {
      this.plugin.settings.animatedGradient = value;
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Ocean waves (CSS-only)").setDesc("Gentle layered wave motion on chat background.").addToggle((toggle) => toggle.setValue(!!this.plugin.settings.oceanEnabled).onChange(async (value) => {
      this.plugin.settings.oceanEnabled = value;
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Noise overlay").setDesc("Low-opacity grain for depth without blur.").addToggle((toggle) => toggle.setValue(!!this.plugin.settings.noiseEnabled).onChange(async (value) => {
      this.plugin.settings.noiseEnabled = value;
      await this.plugin.saveSettings();
      this.plugin.refreshChatView();
    }));
    new import_obsidian2.Setting(containerEl).setName("Ocean intensity").setDesc("Controls motion/contrast of ocean layers (0.2 \u2013 1).").addSlider((slider) => {
      var _a;
      return slider.setLimits(0.2, 1, 0.05).setValue((_a = this.plugin.settings.oceanIntensity) != null ? _a : 0.6).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.oceanIntensity = value;
        await this.plugin.saveSettings();
        this.plugin.refreshChatView();
      });
    });
  }
};

// src/commands/index.ts
function registerCommands(plugin) {
  plugin.addCommand({
    id: "humain-open-chat-view",
    name: "Open HUMAIN Chat",
    callback: async () => {
      await plugin.activateChatView();
    }
  });
}

// src/main.ts
var HumainChatPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.registerView(VIEW_TYPE_CHAT, (leaf) => new ChatView(leaf));
    if (this.settings.autoOpenOnStart) {
      this.app.workspace.onLayoutReady(async () => {
        if (this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT).length === 0) {
          await this.activateChatView();
        }
      });
    }
    this.addRibbonIcon("message-square", "Open HUMAIN Chat", async () => {
      await this.activateChatView();
    });
    registerCommands(this);
    this.addSettingTab(new HumainChatSettingTab(this.app, this));
    this.applyThemeVars();
  }
  onunload() {
    for (const leaf of this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)) {
      leaf.detach();
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.applyThemeVars();
  }
  refreshChatView() {
    var _a;
    this.applyThemeVars();
    for (const leaf of this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)) {
      (_a = leaf.view.containerEl) == null ? void 0 : _a.toggleClass("humain-refresh", true);
      setTimeout(() => {
        var _a2;
        return (_a2 = leaf.view.containerEl) == null ? void 0 : _a2.toggleClass("humain-refresh", false);
      }, 0);
    }
  }
  applyThemeVars() {
    var _a;
    const root = document.body;
    root.style.setProperty("--humain-accent", this.settings.accentColor);
    root.classList.toggle("humain-compact", !!this.settings.compactUI);
    root.style.setProperty("--humain-gradient-start", this.settings.gradientStart);
    root.style.setProperty("--humain-gradient-end", this.settings.gradientEnd);
    root.style.setProperty("--humain-gradient-angle", this.settings.gradientAngle);
    root.style.setProperty("--humain-glass-blur", this.settings.glassBlur);
    root.style.setProperty("--humain-glass-opacity", this.settings.glassOpacity);
    root.style.setProperty("--humain-ocean-intensity", String((_a = this.settings.oceanIntensity) != null ? _a : 0.6));
  }
  async activateChatView() {
    const { workspace } = this.app;
    const existing = workspace.getLeavesOfType(VIEW_TYPE_CHAT);
    if (existing.length > 0) {
      workspace.revealLeaf(existing[0]);
      return;
    }
    let leaf;
    if (typeof workspace.getRightLeaf === "function") {
      leaf = workspace.getRightLeaf(false);
    } else {
      leaf = workspace.getLeaf(true);
    }
    await leaf.setViewState({ type: VIEW_TYPE_CHAT, active: true });
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,
